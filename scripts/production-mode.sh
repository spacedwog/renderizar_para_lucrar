#!/bin/bash
# Script para configurar o app para produ√ß√£o
# Remove todos os logs de desenvolvimento

echo "üöÄ Configurando app para produ√ß√£o..."

# Desabilitar logs no LogManager
echo "üîá Desabilitando logs de desenvolvimento..."

# Criar backup do LogManager atual
cp src/utils/LogManager.ts src/utils/LogManager.backup.ts

# Substituir por vers√£o de produ√ß√£o (todos os m√©todos vazios)
cat > src/utils/LogManager.ts << 'EOF'
/**
 * LogManager - Vers√£o de Produ√ß√£o
 * Todos os logs s√£o desabilitados para melhor performance
 */

interface LogConfig {
  enabled: boolean;
  level: 'debug' | 'info' | 'warn' | 'error';
}

class LogManager {
  private static config: LogConfig = {
    enabled: false, // SEMPRE DESABILITADO EM PRODU√á√ÉO
    level: 'error'
  };

  static setConfig(config: Partial<LogConfig>) {
    // Ignorado em produ√ß√£o
  }

  static debug(message: string, ...args: any[]) {
    // Vazio - sem logs em produ√ß√£o
  }

  static info(message: string, ...args: any[]) {
    // Vazio - sem logs em produ√ß√£o
  }

  static warn(message: string, ...args: any[]) {
    // Vazio - sem logs em produ√ß√£o
  }

  static error(message: string, ...args: any[]) {
    // Apenas erros cr√≠ticos em produ√ß√£o
    if (this.config.enabled) {
      console.error(message, ...args);
    }
  }

  static success(message: string, ...args: any[]) {
    // Vazio - sem logs em produ√ß√£o
  }

  static critical(message: string, ...args: any[]) {
    // Cr√≠ticos sempre aparecem
    console.error(`üö® CRITICAL: ${message}`, ...args);
  }

  static disableAll() {
    this.config.enabled = false;
  }

  static enableAll() {
    // Ignorado em produ√ß√£o
  }

  private static shouldLog(level: LogConfig['level']): boolean {
    return false; // Sempre false em produ√ß√£o
  }
}

export default LogManager;
EOF

echo "‚úÖ App configurado para produ√ß√£o!"
echo "üìù Backup salvo em: src/utils/LogManager.backup.ts"
echo "üîÑ Execute 'npm start' para testar"